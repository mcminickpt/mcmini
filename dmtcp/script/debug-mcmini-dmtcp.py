import os
import re
import sys
import subprocess as sp

ckpt_file_regex = r"ckpt*"
restart_script_regex = r"dmtcp_restart_script*"
mcmini_shm_file_regex = r"mcmini*"
cwd = os.getcwd()

def get_script_path():
    return os.path.dirname(os.path.realpath(sys.argv[0]))

def clean_dir(root_dir, regex):
    for filename in os.listdir(root_dir):
        file_path = os.path.join(root_dir, filename)
        try:
            if re.match(regex, filename):
                print(f'>>>> Deleting `{filename}` ...')
                os.unlink(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))

## Rerun make --> ensures there's no build artifacts left over
print(f'>> Calling `cmake` ...')
try:
    sp.check_output(['cmake', '--build', cwd])
except sp.CalledProcessError as e:
    print(f'ERROR: {e}', file=sys.stderr)
    exit(1)

print(f'>> Removing checkpoints & restart scripts ...')
clean_dir(cwd, ckpt_file_regex)
clean_dir(cwd, restart_script_regex)

print(f'>> Removing lingering shared memory files')
clean_dir('/dev/shm', mcmini_shm_file_regex)

print(f'>> Removing the `mcmini` named pipe at `/tmp/mcmini` ...')
sp.run(['rm', '-f', '/tmp/mcmini-fifo'])

print(f'>> Killing lingering `dmtcp_coordinator`s ...')
sp.run(['pkill', '-9', 'dmtcp_co'])

# Run mcmini under checkpointing mode with a timeout.
# The timeout ensures that mcmini exits quickly
# but not too quickly
MCMINI_CHECKPOINT_DURATION = 2
MCMINI_LIFETIME = 3
try:
    sp.run(
        ['./mcmini', '-i', str(MCMINI_CHECKPOINT_DURATION), './hello-world'],
        timeout=MCMINI_LIFETIME, capture_output=False, shell=False
    )
except Exception as e:
    print('Generated a new checkpoint file')

## At this point, a checkpoint file should be created
gdbinit_preamble = f'''# This file was autogenerated by `debug-mcmini-dmtcp.py`
set pagination off
set breakpoint pending on
source {os.path.join(get_script_path(), './debug-mcmini-child-gdb.py')}
'''

gdbinit = gdbinit_preamble + '''
r
'''

gdbinit_attach_dmtcp_child = gdbinit_preamble + '''source ~/dmtcp/util/gdb-dmtcp-utils.py
load-symbols
info threads
'''

with open(os.path.join(cwd, 'gdbinit-autogenerated'), 'w') as gdbinit_file:
    gdbinit_file.write(gdbinit)

with open(os.path.join(cwd, 'gdbinit-attach-dmtcp-child'), 'w') as gdbinit_file:
    gdbinit_file.write(gdbinit_attach_dmtcp_child)

sp.run(
    [
        'gdb', '-x', 'gdbinit-autogenerated', '--args', './mcmini', '--from-first-checkpoint', '-mtf'
    ]
)
